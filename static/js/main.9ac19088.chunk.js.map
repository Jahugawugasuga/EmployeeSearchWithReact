{"version":3,"sources":["components/Header/Header.jsx","components/Footer/Footer.jsx","components/Wrapper/Wrapper.jsx","utils/API.js","components/Table.js","components/Button/Button.jsx","components/Container/index.js","pages/Home.js","App.js","serviceWorker.js","index.js"],"names":["Header","className","Footer","Wrapper","props","axios","get","Table","type","onClick","sortFirstName","sortLastName","employees","map","employee","index","key","src","image","alt","first","firstName","lastName","phone","email","Moment","dob","format","Button","htmlFor","value","search","onChange","handleInputChange","name","placeholder","id","Container","fluid","Home","loadEmployees","API","then","res","data","results","newState","shown","emp","picture","medium","last","date","setState","catch","err","console","log","sortName","state","sort","a","b","nameA","toUpperCase","nameB","comparison","event","target","preventDefault","filter","toLowerCase","includes","this","style","minHeight","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.9ac19088.chunk.js","sourcesContent":["import React from 'react';\nimport './style.css';\n\n\nfunction Header() {\n    return (\n        <div className = \"header\">\n            <h1>Employee Directory</h1>\n            <h4>Click on carrots to filter by heading or use the search bar to narrow your results</h4>\n        </div>\n    \n    )\n}\n\nexport default Header","import React from 'react'\nimport './style.css'\n\nfunction Footer() {\n    return (\n        <div className = \"footer\">\n            <h6>Copyright Jahugawugasuga</h6>\n        </div>\n    \n    )\n}\n\nexport default Footer","import React from 'react'\nimport './style.css'\n\nfunction Wrapper(props) {\n    return (\n        <div\n className = \"wrapper\" {...props}>\n        </div>\n    \n    )\n}\n\nexport default Wrapper","import axios from 'axios';\nconst APIURL = \"https://randomuser.me/api/?results=200&nat=us=\"\n\nexport default {\n    getDirectory: function() {\n        return axios.get(APIURL)\n\n    }\n};","import React from 'react'\nimport Moment from \"moment\";\n\nfunction Table(props) {\n\n    return (\n        <table className=\"table is-fullwidth\">\n            <thead className=\"thead-dark\">\n                <tr>\n                    <th>Image</th>\n                    <th>\n                        <button type=\"button\" onClick={() => props.sortFirstName()}\n                            className=\"btn-dark fa fa-sort\"\n                        >\n                            First Name\n                        </button>\n                    </th>\n                    <th>\n                        <button type=\"button\" onClick={() => props.sortLastName()}\n                            className=\"btn-dark fa fa-sort\"\n                        >\n                            Last Name\n                        </button>\n                    </th>\n                    <th>Phone</th>\n                    <th>Email</th>\n                    <th> DOB</th>\n            \n                </tr>\n            </thead>\n            <tbody>\n                {props.employees.map((employee, index) => (\n                    <tr key={index}>\n                        <td><img src={employee.image} alt={employee.first}/></td>\n                        <td>{employee.firstName}</td>\n                        <td>{employee.lastName}</td>\n                        <td>{employee.phone}</td>\n                        <td>{employee.email}</td>\n                        <td>{Moment(employee.dob).format(\"MMMM D, YYYY\")}</td>\n                    </tr>\n                ))}\n            </tbody>\n        </table>\n    )\n}\nexport default Table;","import React from 'react'\nimport './style.css'\n\nfunction Button(props) {\n    return (\n        <form className=\"search\">\n            <div className=\"buttons\">\n                <label htmlFor=\"employees\">Search Employee Here:</label>\n                <input\n                    value={props.search}\n                    onChange={props.handleInputChange}\n                    name=\"employeeSearch\"\n                    type=\"text\"\n                    placeholder=\"Example `John Smith` \"\n                    className=\"form-control\"\n                    id=\"employeeSearch\"\n                />\n\n            </div>\n        </form>\n\n    );\n}\n\nexport default Button","import React from \"react\";\n\nfunction Container(props) {\n  return <div className={`container${props.fluid ? \"-fluid\" : \"\"}`} {...props} />;\n}\n\nexport default Container;","import React, { Component } from \"react\";\nimport API from \"../utils/API.js\";\nimport Table from \"../components/Table\";\nimport Button from \"../components/Button\"\nimport Container from \"../components/Container\"\n\nclass Home extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      employees: [],\n      shown: []\n    };\n  }\n  loadEmployees = () => {\n    API.getDirectory()\n      .then(res => {\n        let employees = res.data.results;\n        let shown = []\n        shown = employees.map(emp => ({\n          id: emp.id.value,\n          image: emp.picture.medium,\n          firstName: emp.name.first,\n          lastName: emp.name.last,\n          phone: emp.phone,\n          email: emp.email,\n          dob: emp.dob.date\n        }))\n        let newState = { shown, employees };\n        this.setState(newState);\n\n      })\n      .catch(err => {\n        console.log(err)\n      })\n  }\n      sortFirstName = () => {\n        var sortName = this.state.shown.sort(\n            sortTableItems\n        )\n        function sortTableItems(a, b) {\n            var nameA = a.firstName.toUpperCase();\n            var nameB = b.firstName.toUpperCase();\n\n            let comparison = 0;\n\n            if (nameA > nameB) {\n                comparison = 1;\n            } else if (nameA < nameB) {\n                comparison = -1;\n            }\n            return comparison;\n        };\n        this.setState({ shown: sortName })\n    };\n\n    sortLastName = () => {\n        var sortName = this.state.shown.sort(\n            sortTableItems\n        )\n        function sortTableItems(a, b) {\n            var nameA = a.lastName.toUpperCase();\n            var nameB = b.lastName.toUpperCase();\n\n            let comparison = 0;\n\n            if (nameA > nameB) {\n                comparison = 1;\n            } else if (nameA < nameB) {\n                comparison = -1;\n            }\n            return comparison;\n        };\n        this.setState({ shown: sortName })\n    };\n\n  componentDidMount() {\n    this.loadEmployees();\n  }\n\n  //handle search bar functionality, update search results as user types\n  handleInputChange = event => {\n    const search = event.target.value\n    event.preventDefault();\n    let employees = this.state.employees;\n    const shown = employees\n    .filter(emp =>\n      (emp.name.first +\" \" + emp.name.last).toLowerCase().includes(search.toLowerCase())\n    )\n    .map(emp => ({\n      id: emp.id.value,\n      image: emp.picture.medium,\n      firstName: emp.name.first,\n      lastName: emp.name.last,\n      phone: emp.phone,\n      email: emp.email,\n      dob: emp.dob.date\n    }))\n    let newState = { shown, employees };\n    this.setState(newState);\n    \n  };\n  \n\n  render() {\n    return (\n      <div>\n        <h1 className=\"text-center\">Find your colleagues</h1>\n        <Container style={{ minHeight: \"80%\" }}>\n          <Button\n            \n            handleInputChange={this.handleInputChange}\n          \n          />\n          <Table \n          employees={this.state.shown}\n          sortFirstName= {this.sortFirstName}\n          sortLastName = {this.sortLastName}\n          />\n          \n        </Container>\n      </div>\n    );\n  }\n\n};\n\nexport default Home;","import React from \"react\";\nimport Header from './components/Header'\nimport Footer from './components/Footer'\nimport Wrapper from './components/Wrapper'\nimport Home from \"./pages/Home.js\"\n\n\nfunction App() {\n  return (\n    <div>\n      <Header/>\n      <Wrapper>\n        <Home/>\n      </Wrapper>\n      <Footer />\n    </div>\n\n  )\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n    window.location.hostname === 'localhost' ||\n      // [::1] is the IPv6 localhost address.\n      window.location.hostname === '[::1]' ||\n      // 127.0.0.0/8 are considered localhost for IPv4.\n      window.location.hostname.match(\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n      )\n  );\n  \n  export function register(config) {\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n      // The URL constructor is available in all browsers that support SW.\n      const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n      if (publicUrl.origin !== window.location.origin) {\n        // Our service worker won't work if PUBLIC_URL is on a different origin\n        // from what our page is served on. This might happen if a CDN is used to\n        // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n        return;\n      }\n  \n      window.addEventListener('load', () => {\n        const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n  \n        if (isLocalhost) {\n          // This is running on localhost. Let's check if a service worker still exists or not.\n          checkValidServiceWorker(swUrl, config);\n  \n          // Add some additional logging to localhost, pointing developers to the\n          // service worker/PWA documentation.\n          navigator.serviceWorker.ready.then(() => {\n            console.log(\n              'This web app is being served cache-first by a service ' +\n                'worker. To learn more, visit https://bit.ly/CRA-PWA'\n            );\n          });\n        } else {\n          // Is not localhost. Just register service worker\n          registerValidSW(swUrl, config);\n        }\n      });\n    }\n  }\n  \n  function registerValidSW(swUrl, config) {\n    navigator.serviceWorker\n      .register(swUrl)\n      .then(registration => {\n        registration.onupdatefound = () => {\n          const installingWorker = registration.installing;\n          if (installingWorker == null) {\n            return;\n          }\n          installingWorker.onstatechange = () => {\n            if (installingWorker.state === 'installed') {\n              if (navigator.serviceWorker.controller) {\n                // At this point, the updated precached content has been fetched,\n                // but the previous service worker will still serve the older\n                // content until all client tabs are closed.\n                console.log(\n                  'New content is available and will be used when all ' +\n                    'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n                );\n  \n                // Execute callback\n                if (config && config.onUpdate) {\n                  config.onUpdate(registration);\n                }\n              } else {\n                // At this point, everything has been precached.\n                // It's the perfect time to display a\n                // \"Content is cached for offline use.\" message.\n                console.log('Content is cached for offline use.');\n  \n                // Execute callback\n                if (config && config.onSuccess) {\n                  config.onSuccess(registration);\n                }\n              }\n            }\n          };\n        };\n      })\n      .catch(error => {\n        console.error('Error during service worker registration:', error);\n      });\n  }\n  \n  function checkValidServiceWorker(swUrl, config) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl, {\n      headers: { 'Service-Worker': 'script' },\n    })\n      .then(response => {\n        // Ensure service worker exists, and that we really are getting a JS file.\n        const contentType = response.headers.get('content-type');\n        if (\n          response.status === 404 ||\n          (contentType != null && contentType.indexOf('javascript') === -1)\n        ) {\n          // No service worker found. Probably a different app. Reload the page.\n          navigator.serviceWorker.ready.then(registration => {\n            registration.unregister().then(() => {\n              window.location.reload();\n            });\n          });\n        } else {\n          // Service worker found. Proceed as normal.\n          registerValidSW(swUrl, config);\n        }\n      })\n      .catch(() => {\n        console.log(\n          'No internet connection found. App is running in offline mode.'\n        );\n      });\n  }\n  \n  export function unregister() {\n    if ('serviceWorker' in navigator) {\n      navigator.serviceWorker.ready\n        .then(registration => {\n          registration.unregister();\n        })\n        .catch(error => {\n          console.error(error.message);\n        });\n    }\n  }","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport \"./index.css\";\nimport * as serviceWorker from './serviceWorker'\n\n//strictmode helper component to verify components, present warnings in console, dev only.\nReactDOM.render(\n    // <React.StrictMode>\n        <App />,\n    // </React.StrictMode>,\n    document.getElementById(\"root\")\n);\n\n//unregister serviceworker\nserviceWorker.unregister();\n\n\n\n\n"],"sourceRoot":""}